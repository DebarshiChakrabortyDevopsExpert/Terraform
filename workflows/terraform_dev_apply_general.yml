name: Terraform DEV Apply for General Folder

on: 
  push:
    branches:
      - develop
    paths:
       - terraform/env/dev/general/**
  pull_request:

jobs:
  Terraform-Action:
    runs-on: DOCKER_PROD

    env: 
      environment: dev
      folder: general
      backendrg: "rg-mhra-dev-uks-tf"
      backendstorageaccount: "stmhradevukstf01"
      backendcontainer: "rms-dev-terraform-statefile"

    defaults:
      run:
        working-directory: "./terraform/env/dev/general"

    steps:
      #==================================================
      # Checkout Code Repository
      #==================================================   
      - name: 'Checkout Code Repository'
        uses: actions/checkout@v2

      #==================================================
      # Set Environment Variables to Dev                       
      #==================================================   
      - name: Use Development Environment Variables
        run: |
          set +x
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZ_SUB_ID_RMS_DEV }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZ_TEN_ID_RMS_DEV }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZ_CLI_ID_RMS_DEV }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZ_CLI_SEC_RMS_DEV }}" >> $GITHUB_ENV
          set -x
      #==================================================
      # Terraform Format
      #==================================================
      - name: Terraform Format
        id: fmt
        run: terraform fmt

      #==================================================
      # Terraform Init with backend
      #==================================================
      - name: Terraform Init with backend
        id: init
        run: terraform init -backend-config="resource_group_name=$backendrg" -backend-config="storage_account_name=$backendstorageaccount" -backend-config="container_name=$backendcontainer" -backend-config="key=$environment.$folder.terraform.tfstate"

      #==================================================
      # Terraform Validate
      #==================================================
      - name: Terraform Validate
        id: validate
        run: terraform validate

      #==================================================
      # Terraform plan                   
      #==================================================
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -var-file=terraform.tfvars -no-color -input=false
        continue-on-error: true

      #==================================================
      # Checkov Pre Requisites                 
      #==================================================
      - name: Checkov Pre Requisites
        id: precheckov
        if: github.event_name == 'pull_request'
        run: |
          terraform plan -no-color -var-file=terraform.tfvars -input=false --out tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
      #==================================================
      # Checkov Analysis                    
      #==================================================
      - name: Checkov Analysis
        id: checkov
        if: github.event_name == 'pull_request'
        run: checkov -f tfplan.json --soft-fail

      #==================================================
      # Terraform Format and Style              
      #==================================================
      - name: Terraform Format and Style
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          CHECKOV: "Checkov\n${{ steps.checkov.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan and Checkov Summary</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      #==================================================
      # Terraform Plan Status
      #==================================================
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      #==================================================
      # Terraform Apply
      #==================================================
      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -var-file=terraform.tfvars --auto-approve